package pt12.frigidarium.database2.models;

import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by mattijn on 24/05/17.
 */

public class Stock {
    public static final String TABLENAME = "stocks";
    public static final String USERS = "users";
    public static final String INSTOCK =  "in_stock";
    public static final String OUTSTOCK = "out_stock";
    public static final String NAME = "name";
    public static final String UID = "uid";

    public String uid;//public because firebase needs it to be public
    public String name;//public because firebase needs it to be public
    public Map<String, String> users;//public because firebase needs it to be public
    public Map<String, Map<String, StockEntry>> in_stock;//public because firebase needs it to be public
    public Map<String, Map<String, StockEntry>> out_stock;//public because firebase needs it to be public

    /**
     * Get the Uid of a Stock
     * @return The uid of a stock
     */
    public String getUid(){
        return uid;
    }

    /**
     * Get the name of the the stock
     * @return The name of the stock
     */
    public String getName(){
        return name;
    }

    /**
     * get the Set of usersIDs in this stock
     * @return the Set of usersIds in this stock.  The key of the map is a random String generated by Firebase.
     */
    public Map<String,String> getUsers(){
        if (users == null){
            return new HashMap<>();
        }
        return users;
    }

    /**
     * get the the in_stock Map.
     * the key of the this hashmap is the ProductId. the value is a new hashmap.
     * this hashmaps contains all the stockentrys. which contains the bestbefore date and which user added the product to the stock.
     * the key of the hashmap is a random string generated by Firebase.
     * The value is A stockentry  with the same ProductId.
     * @return the hashmap described above.
     */
    public Map<String, Map<String, StockEntry>> getIn_stock(){
        if (in_stock == null) {
            return new HashMap<>();
        }
        return in_stock;
    }

    /**
     * get the the out_stock Map.
     * the key of the this hashmap is the ProductId. the value is a new hashmap.
     * this hashmaps contains all the stockentrys. which contains the bestbefore date and which user added the product to the stock.
     * the key of the hashmap is a random string generated by Firebase.
     * The value is A stockentry  with the same ProductId.
     * @return the hashmap described above.
     */
    public Map<String, Map<String, StockEntry>>  getOut_stock(){
        if (out_stock == null){
            return  new HashMap<>();
        }
        return out_stock;
    }

    /**
     * Do not use this class to create your own instance of Stock.
     */
    public Stock(){}
    public Stock(String uid, String name){
        this.uid = uid;
        this.name = name;
        this.users = null;
        this.in_stock = null;
        this.out_stock = null;
    }

    /**
     * creates a new stock in the database
     * @param stock the stock to be added to the database.
     * @param userID The user that owns this database.
     */
    public static void createStock(Stock stock, String userID){
        getRef(stock.getUid()).setValue(stock);
        getRef(stock.getUid()).child(USERS).push().setValue(userID);
    }

    /**
     * get the Firebase reference of the Stock
     * @param uid the uid of the stock
     * @return the reference to the firbase entry of the stock.
     */
    public static DatabaseReference getRef(String uid){
        return FirebaseDatabase.getInstance().getReference(TABLENAME+"/"+uid);
    }

    /**
     * check if a stock exists.
     * @param uid the uid stock
     * @param checkExist called if it is known that the stock exists.
     */
    public static void checkExist(final String uid, final CheckExist<Stock> checkExist){
        getRef(uid).addValueEventListener(new ValueEventListener() {
            boolean called = false;
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if (!called) {
                    if (dataSnapshot.getValue(Stock.class) == null) {
                        checkExist.onDoesNotExist(uid);
                    } else {
                        checkExist.onExist(dataSnapshot.getValue(Stock.class));
                    }
                    called = true;
                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
                checkExist.onError(databaseError);
            }
        });
    }

    /**
     * this removes a user from a stock in firebase.
     * dont forget to call User.removeUserFromStock.
     * @param stockUid Id of the stock that user user should be removed from.
     * @param userUid Id of the user that should be removed.
     */
    public static void removeUserFromStock(final String stockUid, final String userUid){
        getRef(stockUid).child(USERS).addChildEventListener(new ChildEventListener() {
            private boolean called = false;
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                if (!called){
                    if (userUid.equals(dataSnapshot.getValue(String.class))){
                        getRef(stockUid).child(USERS).child(dataSnapshot.getKey()).removeValue();
                        getRef(stockUid).addValueEventListener(new ValueEventListener() {
                            @Override
                            public void onDataChange(DataSnapshot dataSnapshot) {
                                Stock val = dataSnapshot.getValue(Stock.class);
                                if (val == null){
                                    return;
                                }
                                if (val.getUsers().size() == 0){
                                    getRef(stockUid).removeValue();
                                }
                            }

                            @Override
                            public void onCancelled(DatabaseError databaseError) {

                            }
                        });
                        called = true;
                    }
                }
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {

            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {

            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {

            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }

    /**
     * Add a user to a stock in firebase database.
     * dont forget to call User.addUserToStock
     * @param stockUid The id of the stock that the user should be added to.
     * @param userUid The id of the user that should be added to the stock
     */
    public static void addUserToStock(String stockUid, String userUid){
        getRef(stockUid).child(USERS).push().setValue(userUid);
    }

    /**
     * Add a stock entry to a in stock.
     * @param stockUid the id of the stock that the entry should be added to.
     * @param entry the entry that should be added to Stock
     */
    public static void addStockEntryToInStock(String stockUid, StockEntry entry){
        getRef(stockUid).child(INSTOCK).child(entry.getProductUid()).push().setValue(entry);
    }

    /**
     * Add a stock entry to a in stock.
     * @param stockUid the id of the stock that the entry should be added to.
     * @param entry the entry that should be added to Stock
     */
    public static void addStockEntryToOutStock(String stockUid, StockEntry entry){
        entry.best_before =  null;
        getRef(stockUid).child(OUTSTOCK).child(entry.getProductUid()).push().setValue(entry);
    }

    /**
     * Remove a stock entry from a out-stock
     * @param stockUid the id of the stock that the entry should be removed from
     * @param product_uid the uid of the product that the product is
     * @param stockEntryKey the key of the entry
     */
    public static void removeFromOutStock(String stockUid,String product_uid, String stockEntryKey){
        getRef(stockUid).child(OUTSTOCK).child(product_uid).child(stockEntryKey).removeValue();
    }
}
